## Загальна інформація про проект
Створити повнофункціональний веб-мессенджер для миттєвого обміну повідомленнями, подібний до Telegram, використовуючи PHP, HTML, CSS, JavaScript у середовищі PHPStorm з WAMPserver.

## Технічні вимоги

### Технологічний стек:
- **Backend**: PHP 8.0+ (процедурний або ООП підхід)
- **Frontend**: HTML5, CSS3, JavaScript (ES6+)
- **База даних**: MySQL/MariaDB
- **Сервер**: WAMPserver (Apache + MySQL + PHP)
- **IDE**: PHPStorm
- **Додатково**: AJAX для асинхронних запитів, WebSocket або Long Polling для real-time оновлень

### Структура бази даних:
Створити наступні таблиці:

1. **users** (користувачі):
   - id (PRIMARY KEY, AUTO_INCREMENT)
   - username (UNIQUE, VARCHAR(50))
   - email (UNIQUE, VARCHAR(100))
   - password_hash (VARCHAR(255))
   - first_name (VARCHAR(50))
   - last_name (VARCHAR(50))
   - avatar (VARCHAR(255), шлях до зображення)
   - last_seen (TIMESTAMP)
   - status (ENUM: 'online', 'offline', 'away')
   - created_at (TIMESTAMP)
   - updated_at (TIMESTAMP)

2. **chats** (чати):
   - id (PRIMARY KEY, AUTO_INCREMENT)
   - name (VARCHAR(100), для групових чатів)
   - type (ENUM: 'private', 'group')
   - created_by (INT, FOREIGN KEY до users.id)
   - created_at (TIMESTAMP)
   - updated_at (TIMESTAMP)

3. **chat_participants** (учасники чату):
   - id (PRIMARY KEY, AUTO_INCREMENT)
   - chat_id (INT, FOREIGN KEY до chats.id)
   - user_id (INT, FOREIGN KEY до users.id)
   - role (ENUM: 'admin', 'member')
   - joined_at (TIMESTAMP)

4. **messages** (повідомлення):
   - id (PRIMARY KEY, AUTO_INCREMENT)
   - chat_id (INT, FOREIGN KEY до chats.id)
   - sender_id (INT, FOREIGN KEY до users.id)
   - message_text (TEXT)
   - message_type (ENUM: 'text', 'image', 'file')
   - file_path (VARCHAR(255), для файлів/зображень)
   - reply_to_message_id (INT, FOREIGN KEY до messages.id)
   - is_edited (BOOLEAN, DEFAULT FALSE)
   - sent_at (TIMESTAMP)
   - edited_at (TIMESTAMP)

5. **message_status** (статус повідомлень):
   - id (PRIMARY KEY, AUTO_INCREMENT)
   - message_id (INT, FOREIGN KEY до messages.id)
   - user_id (INT, FOREIGN KEY до users.id)
   - status (ENUM: 'sent', 'delivered', 'read')
   - timestamp (TIMESTAMP)

## Функціональні вимоги

### Обов'язкові функції:
1. **Аутентифікація та авторизація**:
   - Реєстрація нових користувачів
   - Вхід в систему (login/logout)
   - Валідація даних (email, пароль, username)
   - Хешування паролів (password_hash/password_verify)
   - Сесії користувачів

2. **Управління профілем**:
   - Перегляд та редагування профілю
   - Завантаження аватара
   - Зміна паролю
   - Налаштування приватності

3. **Чати та повідомлення**:
   - Створення приватних чатів (один на один)
   - Створення групових чатів
   - Відправка текстових повідомлень
   - Відправка зображень та файлів
   - Відповідь на повідомлення (reply)
   - Редагування власних повідомлень
   - Видалення повідомлень
   - Пошук по повідомленнях

4. **Real-time функціональність**:
   - Миттєве отримання повідомлень
   - Статус "онлайн/офлайн" користувачів
   - Індикатор "друкує повідомлення"
   - Статус доставки повідомлень (відправлено/доставлено/прочитано)

5. **Інтерфейс користувача**:
   - Список чатів з останніми повідомленнями
   - Вікно чату з історією повідомлень
   - Пошук користувачів та чатів
   - Responsive дизайн (адаптивність)
   - Dark/Light режими (опціонально)

### Додаткові функції (для покращення оцінки):
- Групові чати з адміністраторами
- Пересилання повідомлень
- Емодзі та стікери
- Голосові повідомлення
- Відеодзвінки (базова реалізація)
- Шифрування повідомлень
- Архівування чатів
- Експорт історії чатів

## Архітектура проекту

### Файлова структура:
```
coursework/
├── config/
│   ├── database.php (налаштування БД)
│   └── config.php (загальні налаштування)
├── includes/
│   ├── functions.php (допоміжні функції)
│   ├── auth.php (функції аутентифікації)
│   └── session.php (управління сесіями)
├── api/
│   ├── auth.php (API для аутентифікації)
│   ├── messages.php (API для повідомлень)
│   ├── chats.php (API для чатів)
│   └── users.php (API для користувачів)
├── assets/
│   ├── css/
│   │   ├── style.css
│   │   └── responsive.css
│   ├── js/
│   │   ├── main.js
│   │   ├── chat.js
│   │   └── auth.js
│   ├── images/
│   └── uploads/ (аватари та файли)
├── pages/
│   ├── login.php
│   ├── register.php
│   ├── dashboard.php
│   ├── chat.php
│   └── profile.php
├── components/
│   ├── header.php
│   ├── sidebar.php
│   └── footer.php
├── database/
│   └── schema.sql (SQL скрипт для створення БД)
└── index.php (головна сторінка)
```

## Дизайн вимоги

### UI/UX принципи (за мотивами Telegram):
1. **Чистий та мінімалістичний дизайн**
2. **Інтуїтивна навігація**
3. **Швидка завантаження сторінок**
4. **Адаптивний дизайн для різних екранів**
5. **Приємна колірна схема** (сині відтінки як основні)

### Елементи інтерфейсу:
- Бокова панель зі списком чатів
- Головне вікно чату з повідомленнями
- Поле введення повідомлень з кнопками
- Модальні вікна для налаштувань
- Контекстні меню для дій з повідомленнями

## Технічні деталі реалізації

### PHP Backend:
- Використовувати PDO для роботи з базою даних
- Реалізувати MVC паттерн або схожу архітектуру
- Створити RESTful API для frontend-backend взаємодії
- Імплементувати валідацію та санітизацію даних
- Обробка помилок та виключень

### JavaScript Frontend:
- Використовувати сучасний ES6+ синтаксис
- AJAX запити для асинхронної роботи
- WebSocket або Long Polling для real-time оновлень
- Обробка подій (надсилання повідомлень, скролінг тощо)
- Локальне кешування для покращення продуктивності

### Безпека:
- Захист від SQL ін'єкцій (підготовлені запити)
- XSS захист (htmlspecialchars, Content Security Policy)
- CSRF токени для критичних операцій
- Валідація файлів при завантаженні
- Rate limiting для API запитів

## Критерії оцінювання

### Технічна реалізація (40%):
- Коректність роботи коду
- Архітектура та організація коду
- Безпека додатку
- Оптимізація запитів до БД

### Функціональність (35%):
- Повнота реалізованих функцій
- Стабільність роботи
- Обробка помилок
- Real-time функціональність

### Дизайн та UX (15%):
- Зовнішній вигляд інтерфейсу
- Зручність використання
- Адаптивність дизайну
- Схожість з Telegram
Дизайн бери з файлу Telegram Design System (Community).fig.
Створити повнофункціональний, безпечний та зручний мессенджер, який демонструє глибоке розуміння веб-розробки та може слугувати портфоліо проектом. use context7. Для перегляду дизайна використовуй MCP Figma. Можеш шукати різні варіанти готового коду на GitHub.